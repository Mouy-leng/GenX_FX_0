#!/usr/bin/env python3
"""
Simple AMP Chat Interface
Since the API server isn't running, this provides a mock interface to demonstrate AMP communication
"""

import json
from datetime import datetime
from amp_auth import check_auth, get_user_info

class SimpleAMPChat:
    """
    A simple, mock chat interface for the AMP (Automated Model Pipeline) system.
    """
    def __init__(self):
        """
        Initializes the SimpleAMPChat, setting up an empty conversation history.
        """
        self.conversation_history = []
        
    def send_message(self, message: str) -> dict:
        """
        Sends a message to the mock AMP system and returns a response.

        Args:
            message (str): The user's message.

        Returns:
            dict: A dictionary containing the response and other metadata.
        """
        
        # Check authentication
        if not check_auth():
            return {
                "error": "Not authenticated. Please run: python3 amp_cli.py auth --token YOUR_TOKEN",
                "status": "unauthenticated"
            }
        
        user_info = get_user_info()
        timestamp = datetime.now().isoformat()
        
        # Add user message to history
        self.conversation_history.append({
            "timestamp": timestamp,
            "type": "user",
            "user_id": user_info["user_id"],
            "message": message
        })
        
        # Mock AMP response based on message content
        response = self._generate_response(message)
        
        # Add AMP response to history
        self.conversation_history.append({
            "timestamp": datetime.now().isoformat(),
            "type": "amp",
            "message": response
        })
        
        return {
            "status": "success",
            "user_message": message,
            "amp_response": response,
            "timestamp": timestamp,
            "user_id": user_info["user_id"]
        }
    
    def _generate_response(self, message: str) -> str:
        """
        Generates a mock AMP response based on the user's message.

        Args:
            message (str): The user's message.

        Returns:
            str: A mock response from the AMP system.
        """
        message_lower = message.lower()
        
        if "hello" in message_lower or "hi" in message_lower:
            return "Hello! I'm AMP (Automated Model Pipeline). How can I assist you with trading analysis today?"
        
        elif "status" in message_lower:
            return """Current AMP Status:
• Authentication: ✅ Active
• API Provider: Gemini AI
• Services: WebSocket, News, Reddit, Gemini Integration
• Plugins: 4 enabled
• Features: Sentiment Analysis, Social Signals, News Feeds, WebSocket Streams all active"""
        
        elif "market" in message_lower or "price" in message_lower:
            return """I can provide market analysis for various symbols. Here's what I can do:
• Real-time price data via WebSocket streams
• Market predictions using AI models
• Technical analysis and trading signals
• News sentiment analysis
• Social media sentiment from Reddit

Which symbol would you like me to analyze?"""
        
        elif "btc" in message_lower or "bitcoin" in message_lower:
            return """Bitcoin (BTC/USDT) Analysis:
• Current sentiment: BULLISH (based on recent news and social signals)
• Technical indicators suggest upward momentum
• Reddit sentiment: 68% positive mentions
• News sentiment: Neutral to positive
• Recommended action: Monitor for breakout above resistance levels"""
        
        elif "help" in message_lower:
            return """AMP Commands you can try:
• Ask about market status: "What's the market status?"
• Get predictions: "What's your BTC prediction?"
• Check system status: "Show me the status"
• Trading signals: "Give me trading signals for ETH"
• News analysis: "What's the latest crypto news sentiment?"
• Technical analysis: "Analyze EURUSD"

I'm connected to multiple data sources and AI models to provide comprehensive trading insights."""
        
        elif "prediction" in message_lower:
            return """Market Predictions (Generated by AI Models):
• BTC/USDT: 📈 Bullish trend, target: $48,000-$52,000 (7-day horizon)
• ETH/USDT: 📈 Moderate bullish, following BTC momentum
• EUR/USD: 📊 Sideways, range-bound between 1.0850-1.0950
• Gold: 📈 Safe haven demand, bullish bias

Note: These are AI-generated predictions based on current market data, news sentiment, and technical indicators. Always conduct your own research."""
        
        elif "trading" in message_lower or "signal" in message_lower:
            return """Current Trading Signals:
🟢 BTC/USDT: LONG signal active
   Entry: $45,200, Stop: $43,800, Target: $48,500
   
🟡 ETH/USDT: WAIT signal
   Waiting for breakout confirmation above $2,650
   
🔴 AUD/USD: SHORT signal
   Entry: 0.6580, Stop: 0.6620, Target: 0.6520
   
📊 All signals generated using ensemble ML models with 73% historical accuracy."""
        
        else:
            return f"""I understand you're asking about: "{message}"

I'm AMP - an AI-powered trading analysis system. I can help with:
• Market predictions and analysis
• Trading signals and technical indicators  
• News and sentiment analysis
• Real-time data monitoring
• Multi-asset coverage (Crypto, Forex, Commodities)

Could you be more specific about what trading information you'd like? For example:
- "Analyze Bitcoin"
- "Show trading signals" 
- "What's the market sentiment?"
- "Give me EUR/USD analysis" """
    
    def get_conversation_history(self) -> list:
        """
        Gets the current conversation history.

        Returns:
            list: A list of conversation entries.
        """
        return self.conversation_history
    
    def clear_history(self):
        """
        Clears the conversation history.
        """
        self.conversation_history = []

def main():
    """
    The main function for the interactive chat interface.
    """
    chat = SimpleAMPChat()
    
    print("🤖 AMP Chat Interface")
    print("====================")
    
    # Check authentication
    if not check_auth():
        print("❌ Not authenticated. Please run: python3 amp_cli.py auth --token YOUR_TOKEN")
        return
    
    user_info = get_user_info()
    print(f"✅ Authenticated as: {user_info['user_id']}")
    print("💬 You can now chat with AMP! Type 'quit' to exit, 'history' to see conversation, 'clear' to clear history.\n")
    
    while True:
        try:
            message = input("You: ").strip()
            
            if message.lower() == 'quit':
                print("👋 Goodbye!")
                break
            elif message.lower() == 'history':
                history = chat.get_conversation_history()
                print("\n📜 Conversation History:")
                for entry in history:
                    prefix = "You" if entry["type"] == "user" else "AMP"
                    print(f"{prefix}: {entry['message']}")
                print()
                continue
            elif message.lower() == 'clear':
                chat.clear_history()
                print("🗑️ Conversation history cleared.\n")
                continue
            elif not message:
                continue
            
            result = chat.send_message(message)
            
            if "error" in result:
                print(f"❌ Error: {result['error']}")
            else:
                print(f"AMP: {result['amp_response']}\n")
                
        except KeyboardInterrupt:
            print("\n👋 Goodbye!")
            break
        except Exception as e:
            print(f"❌ Error: {e}")

if __name__ == "__main__":
    main()